name: Docker Build and Push

on:
  # 当推送到 main/develop 分支且源码改变时触发
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'next.config.js'
      - 'Dockerfile'
      - '.github/workflows/docker-build-and-push.yml'
    # 当推送标签时触发（用于版本发布）
    tags:
      - 'v*'

  # 允许手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '自定义标签 (可选)'
        required: false
        default: ''

env:
  # GitHub Container Registry 相关配置
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: hnrobert/hnrobert-homepage

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      should-retag: ${{ steps.changes.outputs.should-retag }}
      source-changed: ${{ steps.changes.outputs.source-changed }}
      existing-image: ${{ steps.changes.outputs.existing-image }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 10 # 增加深度以检查更多提交

      - name: 登录到 GitHub Container Registry (检查镜像)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 检查源码变更和现有镜像
        id: changes
        run: |
          # 检查是否为版本标签推送
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "🏷️ 版本标签推送: $TAG_NAME"
            
            # 查找最近的 commit SHA（跳过标签提交本身）
            CONTENT_SHA=$(git log --format="%H" --skip=1 -n 1)
            echo "📋 内容提交 SHA: $CONTENT_SHA"
            
            # 检查是否存在基于此 SHA 的镜像
            EXISTING_IMAGE="${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:main-${CONTENT_SHA:0:7}"
            if docker manifest inspect "$EXISTING_IMAGE" >/dev/null 2>&1; then
              echo "✅ 找到现有镜像: $EXISTING_IMAGE"
              echo "should-build=false" >> $GITHUB_OUTPUT
              echo "should-retag=true" >> $GITHUB_OUTPUT
              echo "source-changed=version-tag" >> $GITHUB_OUTPUT
              echo "existing-image=$EXISTING_IMAGE" >> $GITHUB_OUTPUT
            else
              echo "❌ 未找到现有镜像，将进行构建"
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "should-retag=false" >> $GITHUB_OUTPUT
              echo "source-changed=version-tag-build" >> $GITHUB_OUTPUT
              echo "existing-image=" >> $GITHUB_OUTPUT
            fi
            
          # 检查是否为 develop 到 main 的合并
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # 检查最近的提交是否为 merge commit
            if git log --merges -n 1 --pretty=format:"%s" | grep -q "Merge.*develop.*main\|Merge pull request.*develop"; then
              echo "🔄 检测到 develop 到 main 的合并"
              
              # 获取 develop 分支的最新 commit SHA
              DEVELOP_SHA=$(git log --format="%H" -n 1 origin/develop 2>/dev/null || git log --format="%H" -n 2 | tail -1)
              echo "📋 Develop 提交 SHA: $DEVELOP_SHA"
              
              # 检查是否存在基于此 SHA 的 develop 镜像
              EXISTING_IMAGE="${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:develop-${DEVELOP_SHA:0:7}"
              if docker manifest inspect "$EXISTING_IMAGE" >/dev/null 2>&1; then
                echo "✅ 找到现有 develop 镜像: $EXISTING_IMAGE"
                echo "should-build=false" >> $GITHUB_OUTPUT
                echo "should-retag=true" >> $GITHUB_OUTPUT
                echo "source-changed=develop-merge" >> $GITHUB_OUTPUT
                echo "existing-image=$EXISTING_IMAGE" >> $GITHUB_OUTPUT
              else
                echo "❌ 未找到现有 develop 镜像，将进行构建"
                echo "should-build=true" >> $GITHUB_OUTPUT
                echo "should-retag=false" >> $GITHUB_OUTPUT
                echo "source-changed=develop-merge-build" >> $GITHUB_OUTPUT
                echo "existing-image=" >> $GITHUB_OUTPUT
              fi
            else
              # 正常的 main 分支推送，检查源码变更
              if git diff --name-only HEAD~1 | grep -E "(src/|package\.json|pnpm-lock\.yaml|next\.config\.js|Dockerfile|docker-compose.*\.yml)" > /dev/null; then
                echo "✅ 检测到源码变更，将进行构建"
                echo "should-build=true" >> $GITHUB_OUTPUT
                echo "should-retag=false" >> $GITHUB_OUTPUT
                echo "source-changed=main-source-change" >> $GITHUB_OUTPUT
                echo "existing-image=" >> $GITHUB_OUTPUT
              else
                echo "ℹ️ 未检测到源码变更，跳过构建"
                echo "should-build=false" >> $GITHUB_OUTPUT
                echo "should-retag=false" >> $GITHUB_OUTPUT
                echo "source-changed=main-no-change" >> $GITHUB_OUTPUT
                echo "existing-image=" >> $GITHUB_OUTPUT
              fi
            fi
            
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "🔧 手动触发，将进行构建"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "should-retag=false" >> $GITHUB_OUTPUT
            echo "source-changed=manual" >> $GITHUB_OUTPUT
            echo "existing-image=" >> $GITHUB_OUTPUT
            
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📋 PR创建，将进行构建（仅构建不推送）"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "should-retag=false" >> $GITHUB_OUTPUT
            echo "source-changed=pr" >> $GITHUB_OUTPUT
            echo "existing-image=" >> $GITHUB_OUTPUT
            
          else
            # 其他分支的源码变更检查
            if git diff --name-only HEAD~1 | grep -E "(src/|package\.json|pnpm-lock\.yaml|next\.config\.js|Dockerfile|docker-compose.*\.yml)" > /dev/null; then
              echo "✅ 检测到源码变更，将进行构建"
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "should-retag=false" >> $GITHUB_OUTPUT
              echo "source-changed=branch-source-change" >> $GITHUB_OUTPUT
              echo "existing-image=" >> $GITHUB_OUTPUT
              echo "变更的文件:"
              git diff --name-only HEAD~1 | grep -E "(src/|package\.json|pnpm-lock\.yaml|next\.config\.js|Dockerfile|docker-compose.*\.yml)"
            else
              echo "ℹ️ 未检测到源码变更，跳过构建"
              echo "should-build=false" >> $GITHUB_OUTPUT
              echo "should-retag=false" >> $GITHUB_OUTPUT
              echo "source-changed=branch-no-change" >> $GITHUB_OUTPUT
              echo "existing-image=" >> $GITHUB_OUTPUT
            fi
          fi

  # 镜像重新标记作业（当找到现有镜像时）
  retag-existing:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-retag == 'true'

    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 生成元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
          tags: |
            # 为分支设置标签
            type=ref,event=branch
            # 为标签设置版本号
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # 为 main 分支设置 latest 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 自定义标签（手动触发时）
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}

      - name: 重新标记现有镜像
        run: |
          EXISTING_IMAGE="${{ needs.check-changes.outputs.existing-image }}"
          echo "🏷️ 开始重新标记现有镜像: $EXISTING_IMAGE"

          # 拉取现有镜像
          docker pull "$EXISTING_IMAGE"

          # 为每个新标签重新标记
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "🏷️ 标记为: $tag"
              docker tag "$EXISTING_IMAGE" "$tag"
              docker push "$tag"
            fi
          done

      - name: 输出重新标记信息
        run: |
          echo "## 🏷️ 镜像重新标记完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 标记信息" >> $GITHUB_STEP_SUMMARY
          echo "- **源镜像**: \`${{ needs.check-changes.outputs.existing-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **新标签**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **原因**: ${{ needs.check-changes.outputs.source-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ 优化说明" >> $GITHUB_STEP_SUMMARY
          echo "由于内容未变更，重用了现有镜像以节省构建时间和资源。" >> $GITHUB_STEP_SUMMARY

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 生成元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
          tags: |
            # 为分支设置标签
            type=ref,event=branch
            # 为 PR 设置标签
            type=ref,event=pr
            # 为标签设置版本号
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # 为 main 分支设置 latest 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 自定义标签（手动触发时）
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
            # add short SHA for all builds
            type=sha,prefix={{branch}}-,format=short
          labels: |
            org.opencontainers.image.title=HNRobert Homepage
            org.opencontainers.image.description=Personal homepage and portfolio website
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=hnrobert
            org.opencontainers.image.licenses=MIT

      - name: 构建和推送 Docker 镜像
        id: build
        uses: docker/build-push-action@v5
        with:
          provenance: false # Disable provenance to avoid unknown/unknown
          sbom: false # Disable sbom to avoid unknown/unknown
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 生成构建证明
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: 输出镜像信息
        run: |
          echo "## 🐳 Docker 镜像构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 镜像信息" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像标签**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Git提交**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 使用方法" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# 从 GitHub Container Registry 拉取" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 部署通知作业
  notify:
    runs-on: ubuntu-latest
    needs: [check-changes, build-and-push, retag-existing]
    if: always() && github.event_name != 'pull_request' && (needs.check-changes.outputs.should-build == 'true' || needs.check-changes.outputs.should-retag == 'true')

    steps:
      - name: 发送部署通知
        run: |
          if [[ "${{ needs.check-changes.outputs.should-retag }}" == "true" ]]; then
            if [[ "${{ needs.retag-existing.result }}" == "success" ]]; then
              echo "🏷️ 镜像重新标记完成！"
              echo "📦 重用现有镜像："
              echo "  - 源镜像: ${{ needs.check-changes.outputs.existing-image }}"
              echo "  - GitHub Container Registry: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}"
              echo "📋 变更原因: ${{ needs.check-changes.outputs.source-changed }}"
              echo "⚡ 优化: 节省了构建时间和资源"
            else
              echo "❌ 镜像重新标记失败！"
              echo "📋 请检查重新标记日志"
            fi
          elif [[ "${{ needs.check-changes.outputs.should-build }}" == "true" ]]; then
            if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
              echo "🎉 Docker 镜像构建完成！"
              echo "📦 镜像已发布到："
              echo "  - GitHub Container Registry: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}"
              echo "📋 变更原因: ${{ needs.check-changes.outputs.source-changed }}"
            elif [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
              echo "❌ Docker 镜像构建失败！"
              echo "📋 请检查构建日志"
            elif [[ "${{ needs.build-and-push.result }}" == "skipped" ]]; then
              echo "⏭️ Docker 镜像构建被跳过"
              echo "📋 原因: 未检测到源码变更"
            fi
          else
            echo "ℹ️ 未进行任何操作"
            echo "📋 原因: ${{ needs.check-changes.outputs.source-changed }}"
          fi
